# grub.cfg

unset default
unset wait

# restart Grub PXE
    function reload {
        configfile (memdisk)/stage1pxe/grub.cfg;
    }

# probe for defaults
    for env_file in $net_pxe_hostname $net_default_ip $net_default_mac; do
        echo "probing for defaults for $env_file"
        if load_env --file $prefix/env/$env_file default wait; then
            echo "found defaults for $env_file"
            break
        fi
    done

# probe for a local grub in /grub"
    echo "probing for a local grub in /grub"
    if search --file --no-floppy /grub/${grub_cpu}-${grub_platform}/core.img --set root_grub2; then
        menuentry "local: /grub/${grub_cpu}-${grub_platform}/core.img ($root_grub2)" --id=local-grub2 {
            set root=$root_grub2
            multiboot /grub/${grub_cpu}-${grub_platform}/core.img
        }
        if test -z "$default"; then
            set default=local-grub2
        fi
    elif search --file --no-floppy /grub/grub.cfg --set root_grub2; then
        menuentry "local: /grub/grub.cfg ($root_grub2)" --id=local-grub2 {
            set root=$root_grub2
            configfile /grub/grub.cfg
        }
        if test -z "$default"; then
            set default=local-grub2
        fi
    else
        echo "probing for a local grub in /boot/grub"
        if search --file --no-floppy /boot/grub/${grub_cpu}-${grub_platform}/core.img --set root_grub2_boot; then
            menuentry "local: /boot/grub/${grub_cpu}-${grub_platform}/core.img ($root_grub2_boot)" --id=local-grub2 {
                set root=$root_grub2_boot
                multiboot /boot/grub/${grub_cpu}-${grub_platform}/core.img
            }
            if test -z "$default"; then
                set default=local-grub2
            fi
        elif search --file --no-floppy /boot/grub/grub.cfg --set root_grub2_boot; then
            menuentry "local: /boot/grub/grub.cfg ($root_grub2_boot)" --id=local-grub2 {
                set root=$root_grub2_boot
                configfile /boot/grub/grub.cfg
            }
            if test -z "$default"; then
                set default=local-grub2
            fi
        fi
    fi

# probe for a local windows 2000, xp, vista, 7, 10"
    if [ "${grub_platform}" = "pc" ]; then
        echo "probing for a local Windows in /bootmgr"
        if search --file --no-floppy /bootmgr --set root_bootmgr; then
            menuentry "local: Windows /bootmgr ($root_bootmgr)" --id=local-bootmgr {
                insmod ntldr
                set root=$root_bootmgr
                ntldr (${root})/bootmgr
            }
            if test -z "$default"; then
              set default=local-bootmgr
            fi
        fi

        echo "probing for a local Windows in /ntldr"
        if search --file --no-floppy /ntldr --set root_ntldr; then
            menuentry "local: Windows /ntldr ($root_ntldr)" --id=local-ntldr {
                insmod ntldr
                set root=$root_ntldr
                ntldr (${root})/ntldr
            }
            if test -z "$default"; then
              set default=local-ntldr
            fi
        fi
    fi

# probe for local EFI boot"
    if [ "${grub_platform}" = "efi" ]; then
    echo "probing for a local EFI boot"
    if search --file --no-floppy /EFI/BOOT/bootx64.efi --set root_efi; then
        menuentry 'local: EFI ($root_efi)' --id=local-efi {
            set root=$root_efi
            chainloader (${root})/EFI/BOOT/bootx64.efi
        }
    fi
    fi

# Ubuntu 16.04 LTS (hwe kernel) - manual installation
    menuentry 'Ubuntu 16.04 LTS (hwe kernel) - manual installation' --id=xenial-hwe-install-manual {
        set img_linux=/images/xenial-hwe-netinst.kernel
        set img_initrd=/images/xenial-hwe-netinst.initrd
        echo    "load ($root)$img_linux"
        linux   "$img_linux"
        echo    "load ($root)$img_initrd"
        initrd  "$img_initrd"
    }

# Ubuntu 18.04 LTS - manual installation
    menuentry 'Ubuntu 18.04 LTS - manual installation' --id=bionic-hwe-install-manual {
        set img_linux=/images/bionic-netinst.kernel
        set img_initrd=/images/bionic-netinst.initrd
        echo    "load ($root)$img_linux"
        linux   "$img_linux"
        echo    "load ($root)$img_initrd"
        initrd  "$img_initrd"
    }

# netboot.xyz
    menuentry 'netboot.xyz' --id=netboot.xyz {
        # see https://netboot.xyz/downloads/
        #  v--- https://boot.netboot.xyz/ipxe/netboot.xyz.lkrn
        linux16 (http,boot.netboot.xyz:80)/ipxe/netboot.xyz.lkrn
    }

# alpine-ipxe
    menuentry 'alpine-ipxe' --id=alpine-ipxe {
        # see https://boot.alpinelinux.org/
        #  -> https://boot.alpinelinux.org/alpine-ipxe/x86_64/ipxe.lkrn
        linux16 (https,boot.alpinelinux.org)/alpine-ipxe/x86_64/ipxe.lkrn
    }

if test -n "$default"; then
    set timeout=10
    if test -n "$wait"; then
        set timeout=$wait
    fi
fi

# vim: sw=4 ts=4 et foldmethod=indent foldignore=
